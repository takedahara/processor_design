// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "05/20/2022 16:06:33"
                                                                                
// Verilog Test Bench template for design : simple
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module simple_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg clk;
reg exec;
reg [15:0] in;
reg rst;
// wires                                               
wire [15:0]  out;
wire [15:0]  out2;
wire [15:0]  out3;
wire [15:0]  out4;
wire [2:0]  phase;
wire [31:0]  seg_out;
wire seg_sel;

// assign statements (if any)                          
simple i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.exec(exec),
	.in(in),
	.out(out),
	.out2(out2),
	.out3(out3),
	.out4(out4),
	.phase(phase),
	.rst(rst),
	.seg_out(seg_out),
	.seg_sel(seg_sel)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
                                                       
// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          

always begin
	#100
	clk<=~clk;
end


                                                       
@eachvec;                                              
// --> end                                             
end                                                    
endmodule

